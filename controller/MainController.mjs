import { createRequire } from "module";

const require = createRequire(import.meta.url);

const { Markup } = require("telegraf");

const { getRandomInt } = require("../utils/utilsF.js");

import MongoDBWrapper from "../DataBase/MongoDBWrapper.mjs";

import NetTownApi from "../netTown/NetTown.mjs";

import HashManager from "../utils/HashManager.mjs";
import ApiProcessor from "../netTown/ApiProcessor.mjs";

import { unlink } from "fs";

class Controller {
  static registrationKeyboard = Markup.inlineKeyboard([
    Markup.button.callback("–î–∞", "get_registration"),
    Markup.button.callback("–ù–µ—Ç", "get_registration"),
  ]);

  static mainKeyboard = Markup.inlineKeyboard([
    Markup.button.callback("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "get_schedule"),
    Markup.button.callback("üìä –û—Ü–µ–Ω–∫–∏", "get_perfomance"),
    Markup.button.callback("üìù –ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è", "get_attestation"),
    Markup.button.callback("üóÇ –í–µ–¥–æ–º–æ—Å—Ç—å", "get_statement"),
    Markup.button.callback("üë§ –ü—Ä–æ—Ñ–∏–ª—å", "get_user_settings"),
  ]);

  static downloadXlsPerfomanceKeyboard = Markup.inlineKeyboard([
    Markup.button.callback("–°–∫–∞—á–∞—Ç—å", "get_perfomance_xls"),
  ]);

  static userSettingsKeyboard = Markup.inlineKeyboard([
    Markup.button.callback("–í—ã–±—Ä–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç", "select_account"),
    Markup.button.callback("–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", "add_account"),
    Markup.button.callback("–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", "del_account"),
    Markup.button.callback("–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "del_user"),
  ]);

  static deleteAccountKeyboard = Markup.inlineKeyboard([
    Markup.button.callback("–î–∞", "get_delete_account_scene"),
    Markup.button.callback("–ù–µ—Ç", "start"),
  ]);

  static deleteUserKeyboard = Markup.inlineKeyboard([
    Markup.button.callback("–î–∞", "get_delete_user_scene"),
    Markup.button.callback("–ù–µ—Ç", "start"),
  ]);

  /**
   *
   * @param {Number} userId : { @param {String} state, @param {bool} registerFlag, @param {Class_instanse} NetTownApi}
   */

  static sessionsObject = {};

  static checkOld(ctx) {
    try {
      const serverTimeOffset = 32000;

      const currentTime = Date.now();

      if (ctx.message) {
        const currentDateTime = new Date(currentTime - serverTimeOffset);
        const messageDateTime = new Date(ctx.message.date * 1000);

        return currentDateTime - messageDateTime > 30000 ? true : false;
      }

      if (ctx.update && ctx.update.callback_query) {
        const currentDateTime = new Date(currentTime - serverTimeOffset);
        const callbackQuery = ctx.update.callback_query;
        const messageDateInSeconds =
          callbackQuery.message.date + serverTimeOffset;

        const messageMiliSecondsDate = new Date(messageDateInSeconds * 1000);

        return currentDateTime - messageMiliSecondsDate > 30000 ? true : false;
      }

      return true;
    } catch (err) {
      console.error(err);

      return true;
    }
  }

  static async start(ctx) {
    if (this.checkOld(ctx)) {
      return;
    }

    const userId = ctx.from.id;

    this.addSession(userId);

    const name = ctx.from.first_name;

    await ctx.replyWithMarkdown(
      `*–ü—Ä–∏–≤–µ—Ç, ${name} !*
            *–≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —Å–µ—Ç–µ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞.*
            *–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –Ω–µ–º –ª–∏—à—å –µ–¥–∏–Ω–æ–∂–¥—ã.*
            *–ù–æ–≤–æ—Å—Ç–∏ –±–æ—Ç–∞ ( —Ç—ã –∂–∫ —Ö–æ—á–µ—à—å –∑–Ω–∞—Ç—å –∫–æ–≥–¥–∞ –µ–≥–æ –æ—Ç–∫–ª—é—á–∞—Ç –Ω–∞ –ø—Ä–æ—Ñ. —Ä–∞–±–æ—Ç—ã?  ü§ì), –∫—Ä–∞—Ç–∫–∏–π —Ç—É—Ç–æ—Ä ( —Ç–∞–º –µ—Å—Ç—å —á—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å ), –ø—Ä–∏—ë–º –±–∞–≥ —Ä–µ–ø–æ—Ä—Ç–æ–≤ –∏ —Ç.–¥. —Ç—É—Ç - https://t.me/NetTown*`,
      { disable_web_page_preview: true }
    );

    await ctx.reply("–ü—Ä–æ–≤–µ—Ä—è—é —Ç–≤–æ—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é");

    this.sessionsObject[userId].registerFlag = await this.checkRegister(userId);

    const regFlag = this.sessionsObject[userId].registerFlag;

    if (!regFlag) {
      await ctx.reply("–•–æ—á–µ—à—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è?", this.registrationKeyboard);
    } else {
      const user = await MongoDBWrapper.getUserDataFromID(userId);

      this.addSession(user.userId, regFlag, user.accounts, user.startIndex);

      if (!this.sessionsObject[userId].registerFlag) {
        await ctx.reply(
          "–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å –≤–∞—à–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º, –ø—Ä–∏–¥—ë—Ç—Å—è –µ–≥–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å"
        );

        await this.deleteUser(ctx);

        return;
      }
      await ctx.reply("–ß—Ç–æ —Ö–æ—á–µ—à—å?", this.mainKeyboard);
    }

    return;
  }

  static createNetTownApi(
    login,
    password,
    userId,
    studentId = null,
    registerFlag = false
  ) {
    const net = new NetTownApi(login, password);

    this.sessionsObject[userId].NetTownApi = net;

    this.sessionsObject[userId].NetTownApi.loginData["login"] = login;

    if (password.length < 10) {
      password = HashManager.hashAndBase64Encode(password);
    }

    this.sessionsObject[userId].NetTownApi.loginData["hash_password"] =
      password;

    if (studentId) {
      this.sessionsObject[userId].NetTownApi.loginData["id"] = studentId;
    }

    this.sessionsObject[userId].registerFlag = true;

    return;
  }

  static async checkRegister(userId) {
    const dbResult = await MongoDBWrapper.checkRegisterById(userId);

    if (dbResult) {
      return true;
    } else {
      return false;
    }
  }

  static async registration(ctx) {
    ctx.answerCbQuery();
    this.sessionsObject[ctx.from.id].state = "waitForRegistrationData";

    ctx.reply("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ *login password* –±–µ–∑ * –∫–æ–Ω–µ—á–Ω–æ");
  }

  static async handleRegisterMessage(message, ctx, userId) {
    const regex = /^(\S+)\s(\S+)$/;

    let login;

    let password;

    if (regex.test(message)) {
      const matches = message.match(regex);
      login = matches[1];
      password = matches[2];
    } else console.log("loh");

    if (login && password) {
      this.sessionsObject[userId].state = null;

      this.createNetTownApi(
        login,
        password,
        userId,
        null,
        this.sessionsObject[userId].registerFlag
      );

      await ctx.reply("–ü—Ä–æ–±—É—é –∑–∞–ª–æ–≥–∏–Ω–∏—Ç—Å—å—è —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏");

      const logresult = await this.sessionsObject[userId].NetTownApi.login();

      if (logresult.success === true) {
        await ctx.reply(logresult.message);

        await ctx.reply(
          "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, —Å–µ–π—á–∞—Å –≤–Ω–µ—Å—É –≤–∞—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"
        );

        let dbResult;

        const dbCheckRegister = await this.checkRegister(userId);

        if (dbCheckRegister) {
          dbResult = await MongoDBWrapper.addStudent(
            userId,
            this.sessionsObject[userId].NetTownApi.loginData.login,
            this.sessionsObject[userId].NetTownApi.loginData.hash_password,
            this.sessionsObject[userId].NetTownApi.loginData.id
          );
        } else {
          dbResult = await MongoDBWrapper.addUser(
            userId,
            this.sessionsObject[userId].NetTownApi.loginData.login,
            this.sessionsObject[userId].NetTownApi.loginData.hash_password,
            this.sessionsObject[userId].NetTownApi.loginData.id
          );
        }

        if (dbResult && dbResult.success === true) {
          ctx.reply(
            "–£—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ, –¥–ª—è –ø—Ä–æ–¥–æ–∂–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ /start, –µ—Å–ª–∏ –≤—ã –¥–æ–±–∞–≤–ª—è–ª–∏ –∞–∫–∫–∞—É–Ω—Ç, —Ç–æ –º–æ–∂–µ—Ç–µ –Ω–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç—å "
          );
        } else {
          ctx.reply("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ");
        }
      } else {
        ctx.reply(logresult.message || "–û—à–∏–±–∫–∞ —á–µ–ª");
      }

      return;
    } else {
      return await this.registration(ctx);
    }
  }

  static addSession(userId, regFlag = false, accounts, startIndex) {
    if (!regFlag) {
      this.sessionsObject[userId] = {
        state: null,
        registerFlag: null,
        netTown: null,
      };
    } else {
      this.sessionsObject[userId] = {
        state: null,
        registerFlag: true,
      };

      const acc = accounts[startIndex] || null;

      if (!acc || !acc.login || !acc.hashed_password) {
        return this.addSession(userId, false, null);
      }
      this.createNetTownApi(
        acc.login,
        acc.hashed_password,
        userId,
        acc.studentId || null,
        regFlag
      );
    }
    return;
  }

  static async handleMessage(ctx) {
    if (this.checkOld(ctx)) {
      return;
    }

    const userId = ctx.from.id;
    const message = ctx.message.text;

    if (!this.sessionsObject[userId]) {
      const n = getRandomInt(0, 2);

      await ctx.replyWithPhoto({ source: `./joks/ti_eblan?${n}.jpg` });

      await ctx.reply(
        "–Ø –Ω–µ –∂–¥—É –æ—Ç —Ç–µ–±—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –≤–≤–µ–¥–∏ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"
      );

      return;
    } else {
      const sessionstate = this.sessionsObject[userId].state;

      switch (sessionstate) {
        case "waitForRegistrationData":
          this.handleRegisterMessage(message, ctx, userId);
          break;
      }
    }
  }

  static async getSchedule(ctx) {
    ctx.answerCbQuery();

    if (this.checkOld(ctx)) {
      return;
    }

    if (!this.sessionsObject[ctx.from.id]) {
      ctx.reply("–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∞–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ /start");

      return;
    }

    try {
      await ctx.reply("–ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ ... ");

      const answer = await this.sessionsObject[
        ctx.from.id
      ].NetTownApi.getSchedule();

      const message = answer.message;

      await ctx.reply(message);

      if (answer.success === true) {
        const dataMessage = ApiProcessor.processSchedule(answer.data);

        for (var el of dataMessage) {
          if (!el) {
            continue;
          }

          await ctx.reply(...el);
        }
      }
      return;
    } catch (err) {
      console.error(err);
    }
  }

  static async getPerfomance(ctx) {
    ctx.answerCbQuery();

    if (this.checkOld(ctx)) {
      return;
    }

    if (!this.sessionsObject[ctx.from.id]) {
      await ctx.reply("–¢—ã –Ω–µ –≤ —Å–∏—Å—Ç–µ–º–µ, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ - /start");

      return;
    }

    try {
      await ctx.reply("–ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ ... ");

      const answer = await this.sessionsObject[
        ctx.from.id
      ].NetTownApi.getSchedule();

      const message = answer.message;

      await ctx.reply(message);

      if (answer.success === true) {
        const dataMessage = ApiProcessor.processPerfomance(answer.data);

        if (!dataMessage) {
          await ctx.reply("–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ");

          return;
        }

        let mess;

        mess = dataMessage.join("\n");

        await ctx.reply(mess);

        await ctx.reply(
          "–î–ª—è –±–æ–ª–µ–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å xls —Å —Å–∞–π—Ç–∞",
          this.downloadXlsPerfomanceKeyboard
        );
      } else {
        await ctx.reply(answer.message);
      }
      return;
    } catch (err) {
      console.error(err);
    }
  }

  static async getXls(ctx) {
    ctx.answerCbQuery();

    if (this.checkOld(ctx)) {
      return;
    }

    if (!this.sessionsObject[ctx.from.id]) {
      await ctx.reply("–¢—ã –Ω–µ –≤ —Å–∏—Å—Ç–µ–º–µ, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ - /start");

      return;
    }

    try {
      const answer = await this.sessionsObject[
        ctx.from.id
      ].NetTownApi.getPerfomanceXls();

      const message = answer.message;

      await ctx.reply(message);

      if (answer.success === true) {
        await ctx.replyWithDocument({
          source: answer.data,
          filename: "pp.xlsx",
        });

        await unlink(answer.data, (err) => {
          console.error(err);
        });
      }

      return;
    } catch (err) {
      console.error(err);
    }
  }

  static async getAttestation(ctx) {
    ctx.answerCbQuery();

    if (this.checkOld(ctx)) {
      return;
    }

    if (!this.sessionsObject[ctx.from.id]) {
      await ctx.reply("–¢—ã –Ω–µ –≤ —Å–∏—Å—Ç–µ–º–µ, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ - /start");

      return;
    }

    try {
      await ctx.reply("–ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ ... ");

      const answer = await this.sessionsObject[
        ctx.from.id
      ].NetTownApi.getAttestation();

      await ctx.reply(answer.message);

      if (answer.success === true) {
        const dataMessage = ApiProcessor.processAttestation(answer.data);

        dataMessage.forEach(async (part) => {
          await ctx.replyWithHTML(`<pre>${part}</pre>`);
        });
      }
      return;
    } catch (err) {
      console.error(err);
    }
  }

  static async getStatement(ctx) {
    ctx.answerCbQuery();

    if (this.checkOld(ctx)) {
      return;
    }

    if (!this.sessionsObject[ctx.from.id]) {
      await ctx.reply("–¢—ã –Ω–µ –≤ —Å–∏—Å—Ç–µ–º–µ, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ - /start");

      return;
    }

    try {
      await ctx.reply("–ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ ... ");

      const answer = await this.sessionsObject[
        ctx.from.id
      ].NetTownApi.getStatement();

      const message = answer.message;

      await ctx.reply(message);

      if (answer.success === true) {
        const dataMessage = ApiProcessor.processStatement(answer.data);

        await ctx.replyWithHTML(`<pre>${dataMessage.table}</pre>`);

        if (dataMessage.message) {
          await ctx.replyWithMarkdown(dataMessage.message);
        }
      }
      return;
    } catch (err) {
      console.error(err);
    }
  }

  static async getUserSettings(ctx) {
    ctx.answerCbQuery();

    if (this.checkOld(ctx)) {
      return;
    }

    if (!this.sessionsObject[ctx.from.id]) {
      await ctx.reply("–¢—ã –Ω–µ –≤ —Å–∏—Å—Ç–µ–º–µ, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ - /start");

      return;
    }

    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", Controller.userSettingsKeyboard);

    return;
  }

  static async selectAccount(ctx) {
    ctx.answerCbQuery();

    if (this.checkOld(ctx)) {
      return;
    }

    if (!this.sessionsObject[ctx.from.id]) {
      await ctx.reply("–¢—ã –Ω–µ –≤ —Å–∏—Å—Ç–µ–º–µ, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ - /start");

      return;
    }

    async function ifOneAccount() {
      await ctx.reply("–ê —Ç—É—Ç –≤—ã–±–∏—Ä–∞—Ç—å –Ω–µ—á–µ–≥–æ, —Ç—ã —É–≥–∞—Ä–∞–µ—à—å?");

      return;
    }

    try {
      const { accounts } = await MongoDBWrapper.getUserDataFromID(ctx.from.id);

      if (accounts.length < 2) {
        await ifOneAccount();
        return;
      }

      const logins = accounts.map((acc) => acc.login).filter(Boolean);

      const buttons = logins.map((login) =>
        Markup.button.callback(login, `selected_login:${login}`)
      );

      if (buttons.length < 2) {
        await ifOneAccount();

        return;
      }

      const keyboard = Markup.inlineKeyboard([...buttons]);

      const mess = await ctx.reply("–•–æ—Ä–æ—à–æ, –≤—ã–±–µ—Ä–∏ –∞–∫–∫–∞—É–Ω—Ç", keyboard);

      setTimeout(async () => {
        await ctx.editMessageText("–ê –≤—Å—ë", {
          message_id: mess.message_id,
        });
      }, 2000);
    } catch (err) {
      console.error(err);
    }
  }

  static async handleSelectedLogin(ctx) {
    await ctx.answerCbQuery();

    if (this.checkOld(ctx)) {
      return;
    }

    if (!this.sessionsObject[ctx.from.id]) {
      await ctx.reply("–¢—ã –Ω–µ –≤ —Å–∏—Å—Ç–µ–º–µ, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ - /start");
      return;
    }

    const selectedLogin = ctx.match[1];

    console.log("–í—ã–±—Ä–∞–Ω –ª–æ–≥–∏–Ω", { selectedLogin });

    try {
      await ctx.reply("–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä, –ø—Ä–∏–Ω–∏–º–∞—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏");

      const dbAnswer = await MongoDBWrapper.updateStartIndexForAccount(
        ctx.from.id,
        selectedLogin
      );

      if (!dbAnswer || dbAnswer.success !== true) {
        await ctx.reply("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ");
        return;
      }

      await ctx.reply("–£–¥–∞—á–Ω–æ");

      await ctx.reply(
        "–î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ - /start"
      );
      return;
    } catch (err) {
      console.error(err);
    }
  }

  static async addAccount(ctx) {
    await ctx.answerCbQuery();

    if (this.checkOld(ctx)) {
      return;
    }

    if (!this.sessionsObject[ctx.from.id]) {
      await ctx.reply("–¢—ã –Ω–µ –≤ —Å–∏—Å—Ç–µ–º–µ, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ - /start");
      return;
    }

    try {
      await ctx.reply(
        "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç?",
        this.registrationKeyboard
      );
    } catch (err) {
      console.error(err);
    }
  }

  static async deleteAccount(ctx) {
    await ctx.answerCbQuery();

    if (this.checkOld(ctx)) {
      return;
    }

    if (!this.sessionsObject[ctx.from.id]) {
      await ctx.reply("–¢—ã –Ω–µ –≤ —Å–∏—Å—Ç–µ–º–µ, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ - /start");
      return;
    }

    try {
      const accsLenght = await MongoDBWrapper.checkAccountsLength(ctx.from.id)
        .data;

      if (!accsLenght < 1) {
        await ctx.from("–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –ß–µ–ª");

        return;
      }
      await ctx.reply(
        "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ–¥–∏–Ω –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–æ–≤?",
        this.deleteAccountKeyboard
      );
    } catch (err) {
      console.error(err);
    }
  }

  static async getDeleteAccountScene(ctx) {
    await ctx.answerCbQuery();

    if (this.checkOld(ctx)) {
      return;
    }

    if (!this.sessionsObject[ctx.from.id]) {
      await ctx.reply("–¢—ã –Ω–µ –≤ —Å–∏—Å—Ç–µ–º–µ, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ - /start");
      return;
    }

    try {
      const user = await MongoDBWrapper.getUserDataFromID(ctx.from.id);

      const accounts = user.accounts;

      const buttons = accounts.map((acc) =>
        Markup.button.callback(acc.login, `delete_account:${acc.login}`)
      );

      const keyboard = Markup.inlineKeyboard([...buttons]);

      await ctx.reply("–í—ã–±–µ—Ä–∏ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", keyboard);
    } catch (err) {
      console.error(err);
    }
  }

  static async handleDeleteAccount(ctx) {
    await ctx.answerCbQuery();

    if (this.checkOld(ctx)) {
      return;
    }

    if (!this.sessionsObject[ctx.from.id]) {
      await ctx.reply("–¢—ã –Ω–µ –≤ —Å–∏—Å—Ç–µ–º–µ, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ - /start");
      return;
    }

    const selectedLogin = ctx.match[1];

    console.log("–í—ã–±—Ä–∞–Ω –ª–æ–≥–∏–Ω", { selectedLogin });

    try {
      await ctx.reply("–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä, –ø—Ä–∏–Ω–∏–º–∞—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏");

      const dbAnswer = await MongoDBWrapper.deleteStudent(
        ctx.from.id,
        selectedLogin
      );

      if (!dbAnswer || dbAnswer.success !== true) {
        await ctx.reply("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ");

        console.error(dbAnswer.message);

        return;
      }

      await ctx.reply(dbAnswer.message);

      await ctx.reply(
        "–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –ø–æ—Å—Ç–∞–≤–∏–ª—Å—è –≤–∞—à –ø–µ—Ä–≤—ã–π –∑–∞—Ä–µ–≥–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç, —ç—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ - /start"
      );
      return;
    } catch (err) {
      console.error(err);
    }
  }

  static async deleteUser(ctx) {
    if (ctx.update.callback_query) {
      // –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç—å ctx.answerCbQuery();
      await ctx.answerCbQuery();
    }

    if (!this.sessionsObject[ctx.from.id]) {
      await ctx.reply("–¢—ã –Ω–µ –≤ —Å–∏—Å—Ç–µ–º–µ, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ - /start");
      return;
    }

    if (this.checkOld(ctx)) {
      return;
    }

    try {
      await ctx.reply("–í—ã —É–≤–µ—Ä–µ–Ω—ã?", this.deleteUserKeyboard);
    } catch (err) {
      console.error(err);
    }
  }

  static async getDeleteUserScene(ctx) {
    await ctx.answerCbQuery();

    if (!this.sessionsObject[ctx.from.id]) {
      await ctx.reply("–¢—ã –Ω–µ –≤ —Å–∏—Å—Ç–µ–º–µ, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ - /start");
      return;
    }

    if (this.checkOld(ctx)) {
      return;
    }

    try {
      const dbAnswer = await MongoDBWrapper.deleteUser(ctx.from.id);

      if (!dbAnswer || dbAnswer.success !== true) {
        await ctx.reply("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ");

        console.error(dbAnswer.message);

        return;
      }

      await ctx.replyWithPhoto({ source: `./joks/leave.jpg` });

      await ctx.reply("–ü—Ä–æ—â–∞–π —á—É–≤–∞–∫");
    } catch (err) {
      console.error(err);
    }
  }
}

export default Controller;
