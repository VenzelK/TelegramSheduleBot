import { markdownTable } from "markdown-table";

class ApiProcessor {
  static processSchedule(data) {
    let result = [];

    for (var day of data) {
      const date = this._processDate(day.date);
      const lessons = day.lessons;
      const dayLessons = [];

      if (lessons.length < 1) {
        dayLessons.push("–ü–∞—Ä—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã ");
      }

      for (var lesson of lessons) {
        if (typeof lesson !== "object") {
          dayLessons.push(`–ü–∞—Ä—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã`);
          continue;
        }

        let lessonArray = [];

        if (lesson.startTime && lesson.endTime) {
          lessonArray.push(
            `‚è∞ –í—Ä–µ–º—è: —Å ${lesson.startTime} –¥–æ ${lesson.endTime}`
          );
        }

        if (lesson.name) {
          lessonArray.push(`üìò –ü—Ä–µ–¥–º–µ—Ç: ${lesson.name}`);
        }

        if (lesson.timetable && lesson.timetable.classroom) {
          lessonArray.push(
            `üè¢ –ê—É–¥–∏—Ç–æ—Ä–∏—è: –ó–¥–∞–Ω–∏–µ ${lesson.timetable.classroom.building}, ${lesson.timetable.classroom.name}`
          );
        }

        if (lesson.timetable && lesson.timetable.teacher) {
          lessonArray.push(
            `üë©‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: ${lesson.timetable.teacher.lastName} ${lesson.timetable.teacher.firstName} ${lesson.timetable.teacher.middleName}`
          );
        }

        let res = lessonArray.join("\n");
        dayLessons.push(res || "–ü–∞—Ä –Ω–µ—Ç");
      }

      result.push([`${date}\n${dayLessons.join("\n\n")}`]);
    }

    return result;
  }

  static processPerfomance(data) {
    if (!data.daysWithMarksForSubject) {
      return ["–û—Ü–µ–Ω–æ–∫ –Ω–µ—Ç, —Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏"];
    }

    const header = "–°—Ä–µ–¥–Ω–∏–µ –±–∞–ª–ª—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º\n";

    const resArray = [];

    resArray[0] = header;

    for (var item of data.daysWithMarksForSubject) {
      const name = item.subjectName;

      let body = "–ü—É—Å—Ç–æ";

      if (item.averageMark) {
        body = item.averageMark;
      }

      resArray.push(`${name} - ${body}`);
    }

    return resArray;
  }

  static processAttestation(data) {
    const academicYears = data.academicYears;

    const subjects = data.subjects;

    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è id –∏ —Å–µ–º–µ—Å—Ç—Ä–æ–≤
    const idToSemesterMap = {};

    // –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ academicYears
    for (const year of academicYears) {
      for (const term of year.terms) {
        // –£—á—Ç–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–º–µ—Å—Ç—Ä–æ–≤ –∏ –≤—ã—á–∏—Å–ª–∏–º –Ω–æ–º–µ—Ä —Å–µ–º–µ—Å—Ç—Ä–∞
        const semesterNumber = (year.number - 1) * 2 + term.number;
        // –î–æ–±–∞–≤–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –æ–±—ä–µ–∫—Ç
        idToSemesterMap[term.id] = semesterNumber;
      }
    }

    const semesters = Object.values(idToSemesterMap);

    const semestersIds = Object.keys(idToSemesterMap);

    const headers = ["–ü—Ä–µ–¥–º–µ—Ç", ...semesters, "–ò—Ç–æ–≥"];

    const tableRows = subjects.map((subject) => {
      const row = [subject.name];

      semestersIds.forEach((sId) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ü–µ–Ω–∫–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞
        if (subject.marks && subject.marks[sId]) {
          // console.log({ mark: subject.marks });

          let grade = subject.marks[sId];

          if (grade.value) {
            grade = " " + ApiProcessor.gradeMap[grade.value]; // –ì–ª–∞–∑ –¥—ë—Ä–≥–∞–µ—Ç—Å—è
          } else {
            grade = "()";
          }

          row.push(grade);
        } else {
          row.push("");
        }
      });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–π –æ—Ü–µ–Ω–∫–∏
      if (subject.finalMark && subject.finalMark.value) {
        const finalGrade = ApiProcessor.gradeMap[subject.finalMark.value];
        row.push(finalGrade !== undefined ? " " + finalGrade : "()");
      } else {
        row.push("()");
      }

      return row;
    });

    const tables = [];

    for (let i = 0; i < tableRows.length; i += 20) {
      const chank = tableRows.slice(i, i + 20);

      tables.push(markdownTable([headers, ...chank]));
    }

    return tables;
  }

  static processStatement(data) {
    const subjects = data.subjects;

    const tableRows = subjects.map((subject) => {
      const row = [subject.name];

      let examType = ApiProcessor.examMap[subject.examinationType];

      row.push(examType ? examType : subject.examinationType);

      let grade = "";

      if (subject.marks) {
        grade = JSON.stringify(...Object.values(subject.marks));

        if (grade === "{}") {
          grade = "()";
        } else {
          grade = ApiProcessor.gradeMap[grade] || grade;
        }
      }

      row.push(grade);

      return row;
    });

    const additionals = [];

    let message;

    if (data.profModules.length > 0) {
      additionals.push("–ø—Ä–æ—Ñ–º–æ–¥—É–ª–∏");
    }

    if (data.courseWorks.length > 0) {
      additionals.push("–∫—É—Ä—Å–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã");
    }

    if (additionals.length > 0) {
      message = `–ù–∞–π–¥–µ–Ω—ã ${additionals.join(
        ", "
      )}, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ–±—ã –æ–Ω–∏ —Ç–æ–∂–µ –æ—Ç–æ–±—Ä–∞–∂–∞–ª–∏—Å—å, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –≤ –∫–∞–Ω–∞–ª–µ`;
    }

    const headers = ["–ü—Ä–µ–¥–º–µ—Ç", "–¢–∏–ø –∑–∞—á—ë—Ç–∞", "–û—Ü–µ–Ω–∫–∞"];

    const table = markdownTable([headers, ...tableRows]);

    return { table, message: message || null };
  }

  static _processDate(date) {
    let parsedDate = new Date(date);

    let day = parsedDate.getDate();
    let month = parsedDate.getMonth() + 1; // –ú–µ—Å—è—Ü—ã –≤ JavaScript –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0
    let year = parsedDate.getFullYear();

    // –î–æ–±–∞–≤–ª—è–µ–º –≤–µ–¥—É—â–∏–µ –Ω—É–ª–∏, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    month = month < 10 ? `0${month}` : month;
    day = day < 10 ? `0${day}` : day;

    return `${day}.${month}.${year} `;
  }

  static gradeMap = {
    Five: 5,
    Four: 4,
    Three: 3,
    Two: 2,
    One: 1,
  };

  static examMap = {
    DifferentiatedTest: "–î–∏—Ñ—Ñ.–ó–∞—á—ë—Ç",
    Exam: "–≠–∫–∑–∞–º–µ–Ω",
    Other: "–î—Ä—É–≥–æ–µ",
  };
}

export default ApiProcessor;
